package ru.java.gb.hw3;

import java.util.ArrayList;
import java.util.List;

/**
 * 1. Спроектировать абстрактный класс «Car» у которого должны
 *  быть свойства: марка, модель, цвет, тип кузова, число колёс, тип
 *  топлива, тип коробки передач, объём двигателя; методы:
 *  движение, обслуживание, переключение передач, включение
 *  фар, включение дворников.
 *
 * 2. Создать конкретный автомобиль путём наследования класса
 *  «Car».
 * 3. Расширить абстрактный класс «Car», добавить метод: подметать
 * улицу. Создать конкретный автомобиль путём наследования
 * класса «Car». Провести проверку принципа SRP.
 *
 * 4. Расширить абстрактный класс «Car», добавить метод:
 * включение противотуманных фар, перевозка груза. Провести
 * проверку принципа OCP.
 *
 * 5. Создать конкретный автомобиль путём наследования класса
 * «Car», определить число колёс = 3. Провести проверку принципа LSP.
 *
 * 6. Создать конкретный автомобиль путём наследования класса
 * «Car», определить метод «движение» - «полёт». Провести
 * проверку принципа LSP.
 *
 * 7. Создать интерфейс «Заправочная станция», создать метод:
 * заправка топливом.
 *
 *
 * 8. Имплементировать метод интерфейса «Заправочная станция» в
 * конкретный класс «Car».
 *
 * 9. Добавить в интерфейс «Заправочная станция» методы: протирка
 * лобового стекла, протирка фар, протирка зеркал.
 *
 * 10. Имплементировать все методы интерфейса «Заправочная
 * станция» в конкретный класс «Car». Провести проверку
 * принципа ISP. Создать дополнительный/е интерфейсы и
 * имплементировать их в конкретный класс «Car». Провести
 * проверку принципа ISP.
 *
 * 11. Создать путём наследования класса «Car» два
 * автомобиля: с бензиновым и дизельным двигателями,
 * имплементировать метод «Заправка топливом» интерфейса
 * «Заправочная станция». Реализовать заправку каждого
 * автомобиля подходящим топливом. Провести проверку принципа DIP.
 *
 */



public class ProgramHW3 {
    public static void main(String[] args) {
        AbstractCar harvester = new Harvester("MB", "Harvester", "green", "Truck", 6,
                FuelType.Diesel, GearboxType.MT, 6.0);
        AbstractCar flyCar = new FlyCar("Lambo", "Fly", "blue", "Car", 4,
                FuelType.Gasoline, GearboxType.AT, 2.0);
        AbstractCar tricycle = new Tricycle("BRM", "Tricycle", "yellow", "Car", FuelType.Gasoline,
                GearboxType.AT, 1.5);
        AbstractCar truck = new Truck("Volwo", "FH12", "black", "Truck", 6,
                FuelType.Diesel, GearboxType.AT, 12.0);

        List<AbstractCar> allCars = new ArrayList<>(List.of(flyCar, truck, tricycle, harvester));
        for (AbstractCar car: allCars) {
            System.out.println(car);
            if (car instanceof Refueling) {
                ((Refueling) car).fuel();
            }
            if (car instanceof Wiping) {
                ((Wiping) car).wipMirrors();
                ((Wiping) car).wipHeadlights();
            }
            System.out.println("---------------------");
        }
    }
}
